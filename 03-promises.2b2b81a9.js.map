{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGqB,MAAfC,EAAQC,SAASC,cAAc,uBAC/BC,EAAOF,SAASC,cAAc,sBAC9BE,EAASH,SAASC,cAAc,wBAKN,SAAvBG,EAAcC,EAAUC,GAa/B,OAZgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACSC,KAAKC,SAAW,GAGpCJ,EAAQ,C,SAAEH,EAAUQ,MAAAP,IAGpBG,EAAO,C,SAAEJ,EAAUQ,MAAAP,GAAQ,GAExBA,EAAM,G,CAfYN,SAASC,cAAc,yBAsB/Ba,iBAAiB,SAASC,IACzCA,EAAEC,iBACF,IAAIC,EAAaC,OAAOnB,EAAMoB,OAC1BC,EAAYF,OAAOhB,EAAKiB,OAC5B,IAAK,IAAIE,EAAI,EAAGA,EAAIlB,EAAOgB,MAAOE,IAChCjB,EAAc,EAAIiB,EAAGJ,EAAaI,EAAID,GACnCE,MAAK,EAACjB,SAAEA,EAAUQ,MAAAU,MACjBC,EAAA3B,GAAS4B,OAAOC,QACd,uBAAqBrB,QAAiBkB,MAAU,IAGnDI,OAAM,EAACtB,SAAEA,EAAUQ,MAAAe,MAClBJ,EAAA3B,GAAS4B,OAAOI,QACd,sBAAoBxB,QAAiBuB,MAAU,GAEjD","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n// Підключаємо бібліотеку\n\nconst delay = document.querySelector('input[name=\"delay\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst btnCreatePromise = document.querySelector('button[type=\"submit\"]');\n\n// Звертаємось до необхідних елементів HTML\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n    resolve({ position, delay });\n  } else {\n    // Reject\n    reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n// Пишемо функцію де параметрами є номер промісу (position) та затримку, враховуючи першу затримку (delay), введену користувачем. Ця функция повертає виконаний promise (resolve) або повертає відхилений promise (reject).\n\n\nbtnCreatePromise.addEventListener('click', e => {\n  e.preventDefault();\n  let firstDelay = Number(delay.value);\n  let delayStep = Number(step.value);\n  for (let i = 0; i < amount.value; i++) {\n    createPromise(1 + i, firstDelay + i * delayStep)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n});\n// Вішаємо слухача на подію клік, подія викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount та повертає Promise (then), якщо відхилений, то працює метод catch\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$delay","document","querySelector","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay1","Promise","resolve","reject","setTimeout","Math","random","delay","addEventListener","e","preventDefault","firstDelay","Number","value","delayStep","i","then","delay2","$parcel$interopDefault","Notify","success","catch","delay3","failure"],"version":3,"file":"03-promises.2b2b81a9.js.map"}